/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sampleui;
import java.util.Stack;
import org.apache.commons.lang.StringUtils;
import att.grappa.GrappaPanel;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.CopyOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.util.*;
import javax.swing.JButton;



class XMIFilter extends javax.swing.filechooser.FileFilter{
    
    @Override
    public boolean accept(File file){
        return file.isDirectory() || file.getAbsolutePath().endsWith(".xmi");
    }
    
    @Override
    public String getDescription(){
        return "XMI files (*.xmi)";
    }
}

class JPGFilter extends javax.swing.filechooser.FileFilter{
    
    @Override
    public boolean accept(File file){
        return file.isDirectory() || file.getAbsolutePath().endsWith(".jpg") || file.getAbsolutePath().endsWith(".jpeg");
    }
    
    @Override
    public String getDescription(){
        return "Joint Photographic Expert Group files (*.jpg or *.jpeg)";
    }
}




public class SampleUI extends javax.swing.JFrame {
    
    //private DemoJFileChooser dj;
    //JFrame frame = new JFrame("");
    
    String imageLocation;
    String projectLocation;
    String imageName;
    String xmiLocation;
    String xmiName;
    String fullXmiPath;
    ParseXMI parseXmi;
    int glWidth1;
    int glWidth2;
    String pseudoCodeGlobal;
    String dotfile;
    String dotfileName;
    String dotfilePath;
    GenerateCFG genCFG;
    GrappaPanel gp;
    Scenarios scenarios;
    String stringScenarios;
    PseudoCodeParser pseudoCodeParser;
    int A = this.getWidth();
    int B = this.getHeight();
    HashMap<String,String>seqMsgMapping=new HashMap<String,String>();
    DefaultTableModel model,model1,model2;
    int currDisplay=0;
    int totalScenarioLength;
    String[] allScenarios;
    JButton next = new JButton("Next Scenario");
    JButton fill = new JButton("Get Scenarios");
    JButton previous = new JButton("Previous Scenarios");
    JTable scenarioTable=new JTable();
    int scenarioCount=0;
    String precondition="";
    int elseflagCount=0;
    
    
    /**
     * Creates new form SampleUI
     */
    public SampleUI() {
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        JFrame.setDefaultLookAndFeelDecorated(true);
        jPanel1.setVisible(false);
        imageLabel.setVisible(false);
        changeInput.setVisible(false);
        exportTable.setVisible(false);
        msgAttributeTable.setVisible(false);
        proceed_Home.setVisible(false);
        codeArea.setVisible(false);
        generateCode.setVisible(false);
        savePseudocode.setVisible(false);
        
        jTabbedPane1.setEnabledAt(1, false);
        jTabbedPane1.setEnabledAt(2, false);
        jTabbedPane1.setEnabledAt(3, false);
      
       // jScrollPane8.setViewportView(jPanel3);
        
            
          
        
       // this.add(scrPane);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new java.awt.event.WindowAdapter(){
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent)
                {
                    if((JOptionPane.showConfirmDialog(null,"Are you sure you want to exit?","",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE))==JOptionPane.YES_OPTION){
                        System.exit(0);
                    }
                    else System.out.println("Continue");
                }
            
            
        });
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        projectName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        location = new javax.swing.JTextField();
        create = new javax.swing.JButton();
        browse = new javax.swing.JButton();
        jDialog2 = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        inputXMI = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        inputJPG = new javax.swing.JTextField();
        browseXMI = new javax.swing.JButton();
        browseJPG = new javax.swing.JButton();
        ok = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        changeInput = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        codeArea1 = new javax.swing.JTextArea();
        proceed_Home = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        msgAttributeTable = new javax.swing.JTable();
        exportTable = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        generateCode = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        codeArea = new javax.swing.JTextArea();
        savePseudocode = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        extractMessageAttributeButton = new javax.swing.JButton();
        proceed_Gen_MSg_Pre = new javax.swing.JButton();
        msgScenarioPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        msgScenarioTable = new javax.swing.JTable();
        generateScenario = new javax.swing.JButton();
        msgPreconditonPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        scTable = new javax.swing.JTable();
        previousScenarionButton = new javax.swing.JButton();
        nextScenarioButton = new javax.swing.JButton();
        scenarioLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog1.setTitle("New Project Dialog Box");
        jDialog1.setModal(true);

        jLabel1.setText("Project name :");

        projectName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectNameActionPerformed(evt);
            }
        });

        jLabel2.setText("Project Location :");

        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(create)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addComponent(location, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(browse))
                    .addComponent(projectName, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jDialog1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {location, projectName});

        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(projectName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(location, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse))
                .addGap(33, 33, 33)
                .addComponent(create)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jDialog2.setTitle("Select Input Dialog Box");
        jDialog2.setModal(true);

        jLabel3.setText("Enter Input XMI :");

        inputXMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputXMIActionPerformed(evt);
            }
        });

        jLabel4.setText("Enter Input JPG :");

        browseXMI.setText("Browse");
        browseXMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseXMIActionPerformed(evt);
            }
        });

        browseJPG.setText("Browse");
        browseJPG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseJPGActionPerformed(evt);
            }
        });

        ok.setText("OK");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(28, 28, 28)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog2Layout.createSequentialGroup()
                        .addComponent(ok)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jDialog2Layout.createSequentialGroup()
                        .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputXMI)
                            .addComponent(inputJPG, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(browseXMI)
                            .addComponent(browseJPG))
                        .addContainerGap(117, Short.MAX_VALUE))))
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog2Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(inputXMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseXMI))
                .addGap(23, 23, 23)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(inputJPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseJPG))
                .addGap(31, 31, 31)
                .addComponent(ok)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SFMEA");

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sampleui/new_icon.png"))); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sampleui/folder_open.png"))); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Sequence Diagram"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                .addGap(86, 86, 86))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                .addContainerGap())
        );

        changeInput.setText("Change Input");
        changeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeInputActionPerformed(evt);
            }
        });

        codeArea1.setColumns(20);
        codeArea1.setRows(5);
        jScrollPane3.setViewportView(codeArea1);

        proceed_Home.setText("Proceed");
        proceed_Home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceed_HomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(66, 66, 66)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(changeInput)
                    .addComponent(proceed_Home))
                .addGap(550, 550, 550))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 340, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(changeInput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(proceed_Home)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel2);

        jTabbedPane1.addTab("Home", jScrollPane2);

        msgAttributeTable.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        msgAttributeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        msgAttributeTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane4.setViewportView(msgAttributeTable);

        exportTable.setText("Export as xls");
        exportTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportTableActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        jLabel5.setText("Step 1 (b)");

        generateCode.setText("Generate Pseudocode");
        generateCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateCodeActionPerformed(evt);
            }
        });

        codeArea.setColumns(20);
        codeArea.setRows(5);
        jScrollPane1.setViewportView(codeArea);

        savePseudocode.setText("Save Pseudocode");
        savePseudocode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePseudocodeActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        jLabel6.setText("Step 1 (a)");

        extractMessageAttributeButton.setText("Extract Message Details");
        extractMessageAttributeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractMessageAttributeButtonActionPerformed(evt);
            }
        });

        proceed_Gen_MSg_Pre.setText("Generate Message Precondition Table");
        proceed_Gen_MSg_Pre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceed_Gen_MSg_PreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(extractMessageAttributeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56)
                                .addComponent(generateCode)
                                .addGap(26, 26, 26)
                                .addComponent(savePseudocode))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(exportTable)
                        .addGap(498, 498, 498)
                        .addComponent(proceed_Gen_MSg_Pre)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateCode)
                    .addComponent(savePseudocode)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(extractMessageAttributeButton)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportTable)
                    .addComponent(proceed_Gen_MSg_Pre))
                .addGap(6, 6, 6))
        );

        jTabbedPane1.addTab("Step 1", jPanel3);

        msgScenarioPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Message Precondition Table", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24))); // NOI18N

        msgScenarioTable.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        msgScenarioTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        msgScenarioTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane5.setViewportView(msgScenarioTable);

        generateScenario.setText("Generate Scenario");
        generateScenario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateScenarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout msgScenarioPanelLayout = new javax.swing.GroupLayout(msgScenarioPanel);
        msgScenarioPanel.setLayout(msgScenarioPanelLayout);
        msgScenarioPanelLayout.setHorizontalGroup(
            msgScenarioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, msgScenarioPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(generateScenario, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(291, 291, 291))
            .addGroup(msgScenarioPanelLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(141, Short.MAX_VALUE))
        );
        msgScenarioPanelLayout.setVerticalGroup(
            msgScenarioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(msgScenarioPanelLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                .addGap(31, 31, 31)
                .addComponent(generateScenario)
                .addGap(224, 224, 224))
        );

        jTabbedPane1.addTab("Step 2", msgScenarioPanel);

        msgPreconditonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Message Sequence Tables", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24))); // NOI18N

        scTable.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        scTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Message No", "Message Name", "Precondition"
            }
        ));
        jScrollPane6.setViewportView(scTable);
        scTable.getAccessibleContext().setAccessibleDescription("");

        previousScenarionButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        previousScenarionButton.setText("Previous");
        previousScenarionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousScenarionButtonActionPerformed(evt);
            }
        });

        nextScenarioButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        nextScenarioButton.setText("Next");
        nextScenarioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextScenarioButtonActionPerformed(evt);
            }
        });

        scenarioLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        scenarioLabel.setText("Scenario ");

        javax.swing.GroupLayout msgPreconditonPanelLayout = new javax.swing.GroupLayout(msgPreconditonPanel);
        msgPreconditonPanel.setLayout(msgPreconditonPanelLayout);
        msgPreconditonPanelLayout.setHorizontalGroup(
            msgPreconditonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(msgPreconditonPanelLayout.createSequentialGroup()
                .addGroup(msgPreconditonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(msgPreconditonPanelLayout.createSequentialGroup()
                        .addGap(281, 281, 281)
                        .addComponent(scenarioLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(msgPreconditonPanelLayout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(msgPreconditonPanelLayout.createSequentialGroup()
                        .addGap(365, 365, 365)
                        .addComponent(previousScenarionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nextScenarioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(205, Short.MAX_VALUE))
        );
        msgPreconditonPanelLayout.setVerticalGroup(
            msgPreconditonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(msgPreconditonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scenarioLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(msgPreconditonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousScenarionButton)
                    .addComponent(nextScenarioButton))
                .addGap(78, 78, 78))
        );

        jTabbedPane1.addTab("Step 3", msgPreconditonPanel);

        jMenu1.setText("Project");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sampleui/new_icon.png"))); // NOI18N
        jMenuItem1.setText("New ");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sampleui/folder_open.png"))); // NOI18N
        jMenuItem2.setText("Open");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>                        

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        jDialog1.pack();
        projectName.setText("");
        location.setText("");        
        jDialog1.setLocationRelativeTo(null);
        jDialog1.setVisible(true);
    }                                          

    private void projectNameActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void createActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        String projName = projectName.getText();
        String loc = location.getText();
        String absolutePath = loc+"\\"+projName;
        projectLocation = absolutePath+"\\";
        System.out.println(absolutePath);
        File theDir = new File(absolutePath);
        if(!theDir.exists()){
            System.out.println("creating directory: ");
            boolean result = false;
            try{
                theDir.mkdir();
                result = true;
            }
            catch(SecurityException se){
                
            }
            if(result){
              JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(this), "Project created", "Success!", JOptionPane.INFORMATION_MESSAGE);
              jDialog1.dispose();
              jDialog2.pack();
              inputXMI.setText("");
              inputJPG.setText("");
              jDialog2.setLocationRelativeTo(null);
              jDialog2.setVisible(true);
            }
            else{
              JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(this), "Error creating the project", "Error!", JOptionPane.INFORMATION_MESSAGE);  
            }
        }
        else{
              JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(this), "Project already exists", "Error!", JOptionPane.INFORMATION_MESSAGE);  

        }
    }                                      

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
       // dj=new DemoJFileChooser();
       // frame.add(dj);
       // frame.setSize(400, 300);
       // frame.setLocationRelativeTo(null);
      //  frame.getContentPane().add(dj,"Center");
      //  frame.setSize(dj.getPreferredSize());
      //  frame.setVisible(true);
        //frame.setFocusable(true);
        
        JFileChooser chooseLocation = new JFileChooser();
        chooseLocation.setApproveButtonText("Choose");
        chooseLocation.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooseLocation.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            try
            {
                String loc = chooseLocation.getSelectedFile().getAbsolutePath();
                location.setText(loc);
                
                
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Contents could not be saved", "Error!", JOptionPane.INFORMATION_MESSAGE);                        
  
            }       
        }       
    }                                      

    private void inputXMIActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void browseXMIActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        JFileChooser openXMI = new JFileChooser("./");
        openXMI.setDialogTitle("Select XMI Dialog box");
        openXMI.setFileFilter(new XMIFilter());
        int returnVal = openXMI.showOpenDialog(null);
        
        if(returnVal == JFileChooser.APPROVE_OPTION){
            File file = openXMI.getSelectedFile();
            try{
                inputXMI.setText(file.getAbsolutePath());
                xmiName = openXMI.getSelectedFile().getName();
                xmiLocation = file.getAbsolutePath();
            } catch(Exception ex){
                System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        }
    }                                         

    private void browseJPGActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here
        JFileChooser openJPG = new JFileChooser("./");
        openJPG.setDialogTitle("Select JPG Dialog box");
        openJPG.setFileFilter(new JPGFilter());
        int returnVal = openJPG.showOpenDialog(null);
        
        if(returnVal == JFileChooser.APPROVE_OPTION){
            File file = openJPG.getSelectedFile();
            try{
                inputJPG.setText(file.getAbsolutePath());
                imageName = openJPG.getSelectedFile().getName();
                imageLocation = file.getAbsolutePath();
            } catch(Exception ex){
                System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        }
        
    }                                         

    private void okActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
        System.out.println("OK entered");
        System.out.println(imageLocation);
        
        try{
            System.out.println("Project location : "+projectLocation);
        String projectLocationJpg = projectLocation+imageName;
        System.out.println(projectLocationJpg);
        
        //for copying jpg file
        Path fromJpg = Paths.get(imageLocation);
        Path toJpg = Paths.get(projectLocationJpg);
        CopyOption[] optionsJpg = new CopyOption[]{
        StandardCopyOption.REPLACE_EXISTING,
        StandardCopyOption.COPY_ATTRIBUTES
        }; 
        java.nio.file.Files.copy(fromJpg, toJpg, optionsJpg);
        
        
        //for copying xmi file
        String projectLocationXmi = projectLocation+xmiName;
        Path fromXmi = Paths.get(xmiLocation);
        Path toXmi = Paths.get(projectLocationXmi);
        CopyOption[] optionsXmi = new CopyOption[]{
        StandardCopyOption.REPLACE_EXISTING,
        StandardCopyOption.COPY_ATTRIBUTES
        }; 
        java.nio.file.Files.copy(fromXmi, toXmi, optionsXmi);
        
        }catch(Exception e){
            System.out.println("Exception");
        }
        
        
        imageLabel.setIcon(new ImageIcon(imageLocation));
        
        jDialog2.dispose();
        jPanel1.setVisible(true);  
        imageLabel.setVisible(true);
        changeInput.setVisible(true);
        proceed_Home.setVisible(true);
        generateCode.setVisible(true);
        
    }                                  

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        JFileChooser openP=new JFileChooser("./");
        String filename="Pseudocode";
        String loc=projectLocation+"\\"+filename;
        openP.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        openP.setApproveButtonText("Choose");
        int returnVal = openP.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            File file = openP.getSelectedFile();
            String[] paths;
            String[] paths2;
            String[] paths3;
            try{
                System.out.println(file.getAbsolutePath());
                FilenameFilter fileNameFilter = new FilenameFilter() {
                @Override
                public boolean accept(File dir, String name) {
                if(name.lastIndexOf('.')>0)
                {
                  // get last index for '.' char
                  int lastIndex = name.lastIndexOf('.');
                 
                  // get extension
                  String str = name.substring(lastIndex);
                  
                  // match path name extension
                  if(str.equals(".jpg") || str.equals(".jpeg"))
                  {
                     return true;
                  }
               }
               return false;
            }
         };
                paths = file.list(fileNameFilter);
                System.out.println(paths[0]);
                String fullJpgPath = file.getAbsolutePath()+"\\"+paths[0];
                System.out.println(fullJpgPath);
                
                imageLabel.setIcon(new ImageIcon(fullJpgPath));
                jPanel1.setVisible(true);
                imageLabel.setVisible(true);
                generateCode.setVisible(true);      
                           
                         
                                
                 FilenameFilter fileNameFilter1 = new FilenameFilter() {
   
                @Override
                public boolean accept(File dir, String name) {
                if(name.lastIndexOf('.')>0)
                {
                  // get last index for '.' char
                  int lastIndex = name.lastIndexOf('.');
                  
                  // get extension
                  String str = name.substring(lastIndex);
                  
                  // match path name extension
                  if(str.equals(".doc"))
                  {
                     return true;
                  }
               }
               return false;
            }
         };
                  paths2 = file.list(fileNameFilter1);
                System.out.println(paths2[0]);
                String fullDocPath = file.getAbsolutePath()+"\\"+paths2[0];
                System.out.println(fullDocPath);
                
                BufferedReader in = new BufferedReader(new FileReader(fullDocPath));
                String line = in.readLine();
                codeArea.setVisible(true);
                changeInput.setVisible(true);
                savePseudocode.setVisible(true);
               
                while(line != null){
                codeArea.append(line + "\n");
                line = in.readLine();
                }
                
                
                  FilenameFilter fileNameFilter2 = new FilenameFilter() {
   
                @Override
                public boolean accept(File dir, String name) {
                if(name.lastIndexOf('.')>0)
                {
                  // get last index for '.' char
                  int lastIndex = name.lastIndexOf('.');
                  
                  // get extension
                  String str = name.substring(lastIndex);
                  
                  // match path name extension
                  if(str.equals(".xmi"))
                  {
                     return true;
                  }
               }
               return false;
            }
         };
                
                paths3 = file.list(fileNameFilter2);
                System.out.println(paths3[0]);
                 projectLocation= file.getAbsolutePath();
                 xmiName=paths3[0];
                System.out.println(xmiName);
     }
                
             catch(Exception ex){ 
                System.out.println("Exception");
            }
            
        }  
        
    }                                          

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    private void nextScenarioButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
        System.out.println("currentDisplay++++++++++++ in next"+currDisplay);
        int current=currDisplay;
        if(current<totalScenarioLength-1)
        {
            current++;
            getScenario(current);
            currDisplay++;
        }

        if(currDisplay==totalScenarioLength-1)
        {
            nextScenarioButton.setEnabled(false);
        }
        scenarioLabel.setText("Scenario " + (currDisplay+1));
        previousScenarionButton.setEnabled(true);
    }                                                  

    private void previousScenarionButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        // TODO add your handling code here:
        System.out.println("currentDisplay++++++++++++ in prevoius "+currDisplay);
        int current=currDisplay;
        if(current>0)
        {
            current--;
            getScenario(current);
            currDisplay--;
        }
        nextScenarioButton.setEnabled(true);
        if(currDisplay==0)
        {
            previousScenarionButton.setEnabled(false);
        }
        scenarioLabel.setText("Scenario " + (currDisplay+1));

    }                                                       

    private void proceed_Gen_MSg_PreActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        //       String pseudocode="WithDrawCash(account number,amount)\n" +
        //                           "getBalance(account Number)\n" +
        //                           "balance()\n" +
        //                           "debit(account number,amount)\n" +
        //                           "IF balance<=amount THEN\n" +
        //                           "debitreply()\n" +
        //                           "ELSE\n" +
        //                           "takeMoney()\n" +
        //                           "ENDIF\n" +
        //                           "depositMoney()\n" +
        //                           "depositToBank()\n" +
        //                           "UpdateBal()\n" +
        //                           "requestNewBook()\n" +
        //                           "assigned()";

        Stack ifStack = new Stack();

        boolean elseFlag = false;
        boolean firstEndif = false;
        boolean betweenIfAndElse = false;
        String currentPrecondition = "";
        String previousPrecondition = "";
        String previousMsg="";
        String stackCondition="";

        model1 = new DefaultTableModel();
        //  System.out.println("model++++"+model1+"o");
        msgScenarioTable.setModel(model1);
        msgScenarioTable.setRowHeight(35);
        msgScenarioTable.setShowGrid(true);
        msgScenarioTable.setGridColor(Color.LIGHT_GRAY);
        model1.addColumn("Message No");
        model1.addColumn("Message Name");
        model1.addColumn("Message Precondition");
        msgScenarioTable.getTableHeader().setFont(new Font("SansSerif",Font.BOLD,15));

        String[] msgLines = pseudoCodeGlobal.split("\n");
        //         for(int i=0;i<msgLines.length;i++){
            //             System.out.println(msgLines[i]);  checking if the pseudocode is split properly
            //         }

        for(int i=0;i<msgLines.length;i++){
          
            msgLines[i]=msgLines[i].trim();
              System.out.println("Message:  "+msgLines[i]);
              
              
            if(msgLines[i].startsWith("IF")){          //Case 1
                betweenIfAndElse = true;
                String[] ifLine = msgLines[i].split(" ");
                String cond = ifLine[1];

                //  System.out.println(cond);      checking if condition is extracted

                 if(!currentPrecondition.contains("+")){       //if not even a single endif has been encountered once
                     
                    
                      stackCondition=currentPrecondition + cond +"(F)"+", ";
                      currentPrecondition = currentPrecondition + cond +"(T)"+", ";
                        ifStack.push(stackCondition);
                 }  
                 else{
                     
                     String[] currentPreconditionSplit = currentPrecondition.split("\\+");
                     String[] temp = currentPreconditionSplit;
                     for(int j=0;j<currentPreconditionSplit.length;j++){                 
                         
                         currentPreconditionSplit[j] = currentPreconditionSplit[j]+ cond +"(T)"+", ";
                         temp[j] = temp[j]+ cond +"(F)"+", ";
                         
                     }
                     
                     currentPrecondition = StringUtils.join(currentPreconditionSplit,"+");
                     stackCondition = StringUtils.join(temp,"+");
                     ifStack.push(stackCondition);                     
                 }
                 //stackCondition="";
                 
             }
            /////////////////////////////NEXT CASE////////////////////////////////////////////////////////////////

            else if(msgLines[i].startsWith("ELSE")){            //Case 2
                 
                 betweenIfAndElse = false;
                 elseFlag = true;
                 elseflagCount++;
                 previousPrecondition = ifStack.pop().toString();
                 
                 if(!currentPrecondition.contains("+")){
 
                     ifStack.push(currentPrecondition);
                     
                     currentPrecondition=previousPrecondition;
                     
                 }
                 else{
                    String[] currentPreconditionSplit =currentPrecondition.split("\\+");                    
                    currentPrecondition = StringUtils.join(currentPreconditionSplit,"+");
                    ifStack.push(currentPrecondition);
                     //ifStack.push(previousPrecondition);
                     currentPrecondition=previousPrecondition;
                     
                    //ifStack.push(previousPrecondition);
                 }   
            }

            /////////////////////////////NEXT CASE////////////////////////////////////////////////////////////////

            else if(msgLines[i].startsWith("ENDIF")){            //CASE 3
             previousPrecondition = ifStack.pop().toString(); 
                 if(!currentPrecondition.contains("+")){
                              if(elseFlag) {
                         currentPrecondition = previousPrecondition+"+"+currentPrecondition; 
                        // System.out.println("**Current ** "+currentPrecondition);
                     }
                     
                     else{
                        
                          currentPrecondition = previousPrecondition;
                       //   System.out.println("$$$Current$$$$$ "+currentPrecondition);
                     }
                              
                     if(msgLines[i+1].startsWith("ELSE"))
                     {
                          String temp1=ifStack.pop().toString();
                          ifStack.push(currentPrecondition);
                          ifStack.push(temp1);
                     }
                     else if(msgLines[i+1].startsWith("ENDIF"))
                     {
                         
                         //previousPrecondition = ifStack.pop().toString(); 
                         //System.out.println("PREVIOUS PREC "+previousPrecondition);
                         
                         
                        // if(elseFlag) {
//                                   currentPrecondition = previousPrecondition+"+"+currentPrecondition;  
//                                   System.out.println("CURRENT with else flag "+currentPrecondition);
//                                    // ifStack.push(currentPrecondition);
//                                   
//                                   }
//                         else{                        
//                                
//                          currentPrecondition = previousPrecondition;
//                          System.out.println("CURRENT without else "+currentPrecondition);
//                          //ifStack.push(currentPrecondition);    
//                         }                       
                     }
                      else {
                         // ifStack.push(currentPrecondition);
                     //      System.out.println("last else  ");
                     }  
                     
                     elseflagCount--;
//                     if(elseflagCount==0)
//                         elseFlag = false;
                       elseFlag = false;
                     firstEndif = true;                   
                 }
                 else{
                     
                     //if(elseFlag || elseflagCount>0){
                         if(elseFlag){
//                              String[] currentPreconditionSplit = currentPrecondition.split("\\+");                   
//                     for(int j=0;j<currentPreconditionSplit.length;j++){
//                         currentPreconditionSplit[j] = currentPreconditionSplit[j]+ previousPrecondition;
//                    }
//                     currentPrecondition = StringUtils.join(currentPreconditionSplit,"+");
                              
                         currentPrecondition = previousPrecondition+"+"+currentPrecondition; 
//                        
                          System.out.println("else with else flag ");
                            System.out.println("**Current ** "+currentPrecondition);
                        
                     }
                     
                     else{
//                             String[] currentPreconditionSplit = currentPrecondition.split("\\+");                   
//                     for(int j=0;j<currentPreconditionSplit.length;j++){
//                         currentPreconditionSplit[j] = currentPreconditionSplit[j]+ previousPrecondition;
//                    }
//                     currentPrecondition = StringUtils.join(currentPreconditionSplit,"+");
//                              
                             
                             
                             
                            currentPrecondition = previousPrecondition+"+"+currentPrecondition;                          
                        }         
                        elseflagCount--;
                     
                  elseFlag = false;
                      ifStack.push(currentPrecondition);
                     
                     
                 }
            }

            /////////////////////////////NEXT CASE////////////////////////////////////////////////////////////////

            else if(msgLines[i].startsWith("EXIT")){                //CASE 4

                if(!currentPrecondition.contains("+")){
                    currentPrecondition = currentPrecondition + "$";
                }

                else{
                    String currentPreconditionSplit[] = currentPrecondition.split("\\+");

                    for(int j=0;j<currentPreconditionSplit.length;j++){

                        currentPreconditionSplit[j] = currentPreconditionSplit[j]+"$";

                    }
                    currentPrecondition = StringUtils.join(currentPreconditionSplit,"+");
                }
            }

            /////////////////////////////NEXT CASE////////////////////////////////////////////////////////////////

            else{                          //CASE 5
                
                System.out.println("Hashmap enteries  ");
                precondition = currentPrecondition;
                System.out.println("Precondition:  "+precondition);
                
                
                if(!betweenIfAndElse){
                    if(!currentPrecondition.contains("+")){
                    //   currentPrecondition = currentPrecondition+msgLines[i]+", "; // error due to this line in else part.msg mapping is null
                   
                         Iterator it = seqMsgMapping.entrySet().iterator();
                     while (it.hasNext()) {
                          Map.Entry pair = (Map.Entry)it.next();
                          
                          System.out.println(pair.getKey() + " = " + pair.getValue());
                                // it.remove(); // avoids a ConcurrentModificationException
                               }
                        
                        currentPrecondition = currentPrecondition+seqMsgMapping.get(msgLines[i].substring(0,msgLines[i].indexOf('(')))+",";
                           model1.addRow(new Object[]{
                                        seqMsgMapping.get(msgLines[i].substring(0,msgLines[i].indexOf('('))),
                                            msgLines[i],
                                            precondition,
                                        });
                        }
                        else{
                            String currentPreconditionSplit[] = currentPrecondition.split("\\+");
                            
                            for(int j=0;j<currentPreconditionSplit.length;j++){
                                
                                //currentPreconditionSplit[j] = currentPreconditionSplit[j] + msgLines[i]+", ";                            
                                currentPreconditionSplit[j] = currentPreconditionSplit[j] + seqMsgMapping.get(msgLines[i].substring(0,msgLines[i].indexOf('(')))+",";
                                
                                }
                                currentPrecondition = StringUtils.join(currentPreconditionSplit,"+");
                                
                                 model1.addRow(new Object[]{
                                        seqMsgMapping.get(msgLines[i].substring(0,msgLines[i].indexOf('('))),
                                            msgLines[i],
                                            precondition,
                                        });
                                
                            }
                        }
                        else{
                          
                            if(!currentPrecondition.contains("+")){
                                currentPrecondition = currentPrecondition+seqMsgMapping.get(msgLines[i].substring(0,msgLines[i].indexOf('(')))+",";
                            }
                              else
                              {
                                   String[] ppSplit=currentPrecondition.split("\\+");
                                    for(int k=0;k<ppSplit.length;k++)
                                    {
                                     ppSplit[k]=ppSplit[k]+seqMsgMapping.get(msgLines[i].substring(0,msgLines[i].indexOf('(')))+","; 
                                    }
                                    currentPrecondition=StringUtils.join(ppSplit,"+"); 
                              }
                              model1.addRow(new Object[]{
                                        seqMsgMapping.get(msgLines[i].substring(0,msgLines[i].indexOf('('))),
                                            msgLines[i],
                                            precondition,
                                        });
                                         
                                    
                                }
                            }
                            System.out.println();
                            System.out.println("********************************************************************");
                            System.out.println();
//                          
                            previousMsg=msgLines[i];
                            System.out.println("previous message for loop "+previousMsg);
                            }
                            resizeTable(msgScenarioTable);

                            jTabbedPane1.setSelectedIndex(2);
                            allScenarios=precondition.split("\\+"); 
                            totalScenarioLength=allScenarios.length;    
    }                                                   

    void getScenario(int index)
    {
        scenarioLabel.setText("Scenario " + (index+1));
                        
                        String[] scnMsg = allScenarios[index].split(",");
                        String scnPrecondition = "";
                        DefaultTableModel model = (DefaultTableModel) scTable.getModel();
                        scTable.setRowHeight(35);
                        scTable.setShowGrid(true);
                        scTable.setGridColor(Color.LIGHT_GRAY);
                        scTable.getTableHeader().setFont(new Font("SansSerif", Font.BOLD, 15));
                        model.setRowCount(0);
                        
                        for(int k=0;k<scnMsg.length-1;k++)
                                {
                                     String msgNameMapToSeq="";
                                    //find Message name corresponding to message sequence number
                                    
                                      for (Object o : seqMsgMapping.keySet()) {
                                        if (seqMsgMapping.get(o).equals(scnMsg[k])) {
                                          msgNameMapToSeq=o.toString();
                                        }
                                    }
                                    
                                    
                                    if(scnMsg[k].contains("<=")||scnMsg[k].contains(">=")||scnMsg[k].contains("=="))
                                    {
                                        scnPrecondition+="{"+scnMsg[k]+" },";
                                    }
                                    else {
                                        model.addRow(new Object[]{
                                            scnMsg[k],
                                             msgNameMapToSeq,
                                                scnPrecondition
                                            });
                                            scnPrecondition+=scnMsg[k]+", ";
                                            msgNameMapToSeq="";
                                            }
                                        }

                                        resizeTable(scTable);
                                    
        
        
    }
    
    
    
    
    
    private void extractMessageAttributeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                              
    
        msgAttributeTable.setVisible(true);
        exportTable.setVisible(true);

        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();

        try{
            SAXParser saxParser = saxParserFactory.newSAXParser();
            MyHandler myhandler = new MyHandler();
            String path = projectLocation+"\\"+xmiName;
            //System.out.println("in parser : "+path);

            saxParser.parse(path,myhandler);
            List<MessageBean> msgList = myhandler.getMsgList();
            Map<String, List<String>> life_actMap = myhandler.getLife_actMap();

            //System.out.println("total elements "+msgList.size());
//            for(MessageBean msg : msgList){
//                System.out.println(msg.getMessageName()+" "+msg.getSeqNo()+" "+msg.getTag()+" "+msg.getType()+"\n");
//            }

            model = new DefaultTableModel();
            msgAttributeTable.setModel(model);
            msgAttributeTable.setRowHeight(35);
            msgAttributeTable.setShowGrid(true);
            msgAttributeTable.setGridColor(Color.LIGHT_GRAY);
            model.addColumn("Message Sequence No");
            model.addColumn("Message Name");
            model.addColumn("Message Type");
            model.addColumn("isReply");
            model.addColumn("Message Tag");
            model.addColumn("From");
            model.addColumn("To");
            model.addColumn("Dependent  Message List");
            model.addColumn("Independent Message List");
            model.addColumn("Send Event");
            model.addColumn("Receive Event");

            msgAttributeTable.getTableHeader().setFont(new Font("SansSerif",Font.BOLD,15));
            //jTable1.getTableHeader().setResizingAllowed(false);

            for(MessageBean msg:msgList)
            {
                if(msg.getMessageName()!=null)
                {
                    String fromObj="l";
                    String toObj="l";
                    String fromAct, toAct;
                    fromAct = msg.getFromActivation();
                    toAct = msg.getToActivation();
                    String isReply_value = "";
                    if(msg.isIsReply()==true) isReply_value = "True";
                    else isReply_value = "False";

                    for(Map.Entry<String, List<String>> entry : life_actMap.entrySet()){

                        String key = entry.getKey();
                        List<String> values = entry.getValue();

                        if(values.contains(fromAct)){
                            fromObj = key;
                        }
                        if(values.contains(toAct)){
                            toObj = key;
                        }
                    }
                    String seq = "M"+String.valueOf(msg.getSeqNo());

                    seqMsgMapping.put(msg.getMessageName().substring(0,msg.getMessageName().indexOf('(')),seq);
                        //   System.out.println("Messga name is pa "+  msg.getMessageName().substring(0,msg.getMessageName().indexOf('('))+" vale us "+seq);

                            String dependentList = calculateDependentList(msg,msgList);
                            String independentList = calculateIndependentList(msg,msgList);
                            if(dependentList.contains(","))
                            dependentList = dependentList.substring(0, dependentList.lastIndexOf(","));
                            if(independentList.contains(","))
                            independentList = independentList.substring(0,independentList.lastIndexOf(",") );
                            model.addRow(new Object[]{
                                seq,
                                msg.getMessageName().substring(0,msg.getMessageName().indexOf('(')),
                                    msg.getType(),
                                    isReply_value,
                                    msg.getTag(),
                                    fromObj,
                                    toObj,
                                    dependentList,
                                    independentList,
                                    seq.replace('M', 'E')+"1",
                                    seq.replace('M', 'E')+"2"

                                });
                            }
                        }
                        //              for (Map.Entry<String, String> entry : seqMsgMapping.entrySet()) {
                            //                         String key = entry.getKey();
                            //                        String value = entry.getValue();
                            //                        System.out.println("Hashmap key is "+key+" and value is  "+value);
                            //                  }

                    }
                    catch(Exception ex){
                        ex.printStackTrace();
                    }
                    resizeTable(msgAttributeTable);
    }                                                             

    private void savePseudocodeActionPerformed(java.awt.event.ActionEvent evt) {                                               

        String filename="Pseudocode";
        String loc=projectLocation+"\\"+filename;
        System.out.println("in save : "+loc);
        //saveP.setCurrentDirectory(filename);
        // int returnVal = saveP.showSaveDialog(this);
        BufferedWriter writer = null;
        // System.out.println(xmiName);
        //if(returnVal == JFileChooser.APPROVE_OPTION)
        String xmiNameWithoutExt=xmiName.substring(0,xmiName.lastIndexOf("."));
        System.out.println(xmiNameWithoutExt);

        try
        {
            File file = new File(loc+"_"+xmiNameWithoutExt+".doc");
            // saveP.setCurrentDirectory(file);

            writer = new BufferedWriter(new FileWriter(file.getAbsolutePath()));
            String contents = codeArea.getText();
            writer.write(contents);
            writer.close();
            JOptionPane.showMessageDialog(this, "Contents saved successfully", "Success!", JOptionPane.INFORMATION_MESSAGE);
        } catch(IOException e)
        {
            JOptionPane.showMessageDialog(this, "Contents could not be saved", "Error!", JOptionPane.INFORMATION_MESSAGE);
        }

    }                                              

    private void generateCodeActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        String filename = projectLocation+"\\"+xmiName;
        parseXmi = new ParseXMI();
        String pseudoCode = parseXmi.generatePseudoCode(filename);
//        String pseudoCode="msg1(u,v)\n"+
//"msg1_reply()\n"+
//"IF x==0 THEN\n"+
//	"msg2(a,b)\n"+
//	"msg2_reply()\n"+
//		"IF y==0 THEN\n"+
//			"msg3(a,b)\n"+
//			"msg3_reply()\n"+
//		"ELSE\n"+
//			"msg4(a,b)\n"+
//			"msg4_Reply()\n"+
//		"ENDIF\n"+
//                "msg_NAME(h,j)\n"+
//                "msg_NAME_Reply()\n"+
//"ELSE\n"+
//	"IF z==0 THEN\n"+
//		"msg5(x,y)\n"+
//		"msg5_Reply()\n"+
//	"ELSE\n"+
//		"msg6(a,b)\n"+
//		"msg6_Reply()\n"+
//	"ENDIF\n"+
//"msg7(d,f)\n"+
//"msg7_Reply()\n"+
//"ENDIF\n"+
//"msg8(a,b)\n"+
//"msg8_Reply()";
//        
        pseudoCodeGlobal = pseudoCode;
        codeArea.setText(pseudoCode);
        codeArea.setVisible(true);
        savePseudocode.setVisible(true);
        //proceed.setVisible(true);

    }                                            

    private void exportTableActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        try{
            ExcelExporter exl = new ExcelExporter();
            String path = projectLocation+"\\"+"Message_Attributes.xls";
            File file = new File(path);
            exl.fillData(msgAttributeTable, file);
            JOptionPane.showMessageDialog(null,"Table Exported Successfully","Export Table Content",JOptionPane.INFORMATION_MESSAGE);
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }                                           

    private void proceed_HomeActionPerformed(java.awt.event.ActionEvent evt) {                                             

        jTabbedPane1.setEnabledAt(1, true);
        jTabbedPane1.setEnabledAt(2, true);
        
        jTabbedPane1.setSelectedIndex(1);
    }                                            

    private void changeInputActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:

        inputXMI.setText("");
        inputJPG.setText("");
        jDialog2.setVisible(true);
        codeArea.setVisible(false);
        jTabbedPane1.remove(1);
        jTabbedPane1.remove(2);
        jTabbedPane1.remove(3);

    }                                           

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        jMenuItem2ActionPerformed(evt);
    }                                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        jMenuItem1ActionPerformed(evt);
    }                                        

    private void generateScenarioActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        jTabbedPane1.setEnabledAt(3, true);
        jTabbedPane1.setSelectedIndex(3);
        getScenario(0);
         previousScenarionButton.setEnabled(false);
    }                                                
    
    public void resizeTable(JTable table){
        
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        final TableColumnModel colModel = table.getColumnModel();
        
        for(int i=0;i<table.getColumnCount();i++){
            
            TableColumn col = colModel.getColumn(i);
            int width1 = 0;   //column header width
            int width2 = 50;  // content width
            
            TableCellRenderer renderer1 = col.getHeaderRenderer();
            if(renderer1==null){
                renderer1 = table.getTableHeader().getDefaultRenderer();
            }
            
            Component comp1 = renderer1.getTableCellRendererComponent(table, col.getHeaderValue(), false, false, 0, 0);
            width1 = comp1.getPreferredSize().width;
            
            for(int j=0;j<table.getRowCount();j++){
                
                TableCellRenderer renderer2 = table.getCellRenderer(j, i);
                Component comp2 = table.prepareRenderer(renderer2, j, i);
                width2 = Math.max(comp2.getPreferredSize().width+1, width2);
                
            }
            int wid = Math.max(width1, width2);
            colModel.getColumn(i).setPreferredWidth(wid+2);
            }
        }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
//    public void resizeColumnHeader(JTable table){
//        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        
//        for(int i=0;i<table.getColumnCount();i++){
//            DefaultTableColumnModel colModel = (DefaultTableColumnModel) table.getColumnModel();
//            TableColumn col = colModel.getColumn(i);
//            int width = 0;
//            
//            TableCellRenderer renderer = col.getHeaderRenderer();
//            if(renderer == null){
//                renderer = table.getTableHeader().getDefaultRenderer();
//            }
//            
//            Component comp = renderer.getTableCellRendererComponent(table, col.getHeaderValue(), false, false, 0, 0);
//            width = comp.getPreferredSize().width;
//            col.setPreferredWidth(width+2);
//            
//        }
//        
//        
//    }
    
//    public void resizeColumnWidth(JTable table){
//        
//        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        
//        for(int i=0;i<table.getColumnCount();i++){
//            DefaultTableColumnModel colModel = (DefaultTableColumnModel) table.getColumnModel();
//            TableColumn col = colModel.getColumn(i);
//            int width1 = 0;
//            
//            TableCellRenderer renderer = col.getHeaderRenderer();
//            if(renderer == null){
//                renderer = table.getTableHeader().getDefaultRenderer();
//            }
//            
//            Component comp = renderer.getTableCellRendererComponent(table, col.getHeaderValue(), false, false, 0, 0);
//            width1 = comp.getPreferredSize().width;
//            glWidth1 = width1;
//           // col.setPreferredWidth(width+2);
//            
//        }       
//        final TableColumnModel columnModel = table.getColumnModel();
//        
//        for(int column = 0; column<table.getColumnCount();column++){
//            int width2=50;
//            for(int row=0;row<table.getRowCount();row++){
//                TableCellRenderer renderer = table.getCellRenderer(row, column);
//                Component comp = table.prepareRenderer(renderer, row, column);
//                width2 = Math.max(comp.getPreferredSize().width+1, width2);                
//            }
//            int wid = Math.max(glWidth1, width2);
//            columnModel.getColumn(column).setPreferredWidth(wid+2);           
//        }        
//    }
    
    
    
     private String calculateDependentList(MessageBean msg, List<MessageBean> msgList ){
        
        String dependentList = "";
        
        if(msg.isIsReply()==true){
            return dependentList;
        }
        String compareTag=msg.getTag();
        if(msg.getMessageName()!=null){
           for(MessageBean msgs:msgList){
                String currentTag = msgs.getTag();
                  if(currentTag.contains("."))
                      { int lastDot=msgs.getTag().lastIndexOf(".");
                        //System.out.println("last Dot is "+lastDot);
                         String beforeDot=msgs.getTag().substring(0,lastDot);
                         if(compareTag.equals(beforeDot))
                                  dependentList+=currentTag+", ";
                             
                        }}
            return dependentList;
        }
      System.out.println("next elements ");
        return "";
        
     }
    
    
    
    
    
    private String calculateIndependentList(MessageBean msg, List<MessageBean> msgList ){
        
        String independentList = "";
        
        if(msg.isIsReply()==true){
            return independentList;
        }
        
        if(msg.getMessageName()!=null){
        if(!msg.getTag().contains(".")){
            for(MessageBean msgs:msgList){
                String currentTag = msgs.getTag();
                if((!currentTag.contains(".")) && (Integer.parseInt(currentTag)>Integer.parseInt(msg.getTag()))){
                    independentList+=currentTag+", ";
                }              
            }
            return independentList;
        }
        else if(msg.getTag().contains("."))
        {
            int lastDot=msg.getTag().lastIndexOf(".");
          //  System.out.println("last Dot is "+lastDot);
            String beforeDot=msg.getTag().substring(0,lastDot);
            String afterDot=msg.getTag().substring(lastDot+1);
           // System.out.println("Name of msg "+msg.getMessageName()+"index of msg "+msgList.indexOf("msg"));
          //  System.out.println(beforeDot+"+"+afterDot);
            for(MessageBean m:msgList)
            {
                if(m.isIsReply()==true){
                    continue;
                }
                
                if(m.getTag().contains(".")){
                // System.out.println("before lastDot1 "+m.getTag());  
                int lastDot1=m.getTag().lastIndexOf(".");
//                  System.out.println("last dot1 "+lastDot1);
//                  System.out.println("Message tag is Loop "+m.getTag());  
                String beforeDot1=m.getTag().substring(0,lastDot1);
                String afterDot1=m.getTag().substring(lastDot1+1);
                
               // System.out.println("before Dot1 is "+beforeDot1+" after Dot1 is "+afterDot1);
                if(beforeDot.equals(beforeDot1))
                        { 
                            //System.out.println("condition true");
                    if(Integer.parseInt(afterDot1)>Integer.parseInt(afterDot))
                    {
                        independentList+= beforeDot1+"."+afterDot1+", ";
//                        System.out.println("Independent List ");
//                        System.out.println("internal conidtion true ");
//  
                    }
                }
            }
              //  System.out.println("++++++++++++++++++++++++++++");
            }return independentList;
        }

        
        
        
        }
        System.out.println("next elements ");
        return "";
        
    }
    
    
//   public void getScenarioDetails(int index)
//    {
//         
//        System.out.println("GetScenario clicked ############################################################## curr display "+currDisplay);
//        
//       
//                String[] separateScenarios = stringScenarios.split("Scenario");
//                String precondition="";
//                String[] separateScenarionToken = separateScenarios[index].split("\n");
//                String scenarioNo ="Scenario "+separateScenarionToken[0];
//                DefaultTableModel model = (DefaultTableModel)scTable.getModel();
//                scTable.setRowHeight(35);
//                scTable.setShowGrid(true);
//                scTable.setGridColor(Color.LIGHT_GRAY);
//                scTable.getTableHeader().setFont(new Font("SansSerif",Font.BOLD,15));
//                
//                 model.setRowCount(0);
//                for(int j=1;j<separateScenarionToken.length;j++){
//                   //ArrayList<String> tagList1=new ArrayList<String>();      
//                       if(separateScenarionToken[j].contains("START")||separateScenarionToken[j].isEmpty() || separateScenarionToken[j].contains("END")){
//                         continue;
//                       } 
//                          if( separateScenarionToken[j].contains("TRUE") || separateScenarionToken[j].contains("FALSE")){
//                               precondition+=separateScenarionToken[j]+", ";
//                       }
//                   else {
//                               model.addRow(new Object[]{
//                             seqMsgMapping.get(separateScenarionToken[j].substring(0,separateScenarionToken[j].indexOf('('))),
//                               separateScenarionToken[j],
//                               precondition
//                           });
//                          precondition+=seqMsgMapping.get(separateScenarionToken[j].substring(0,separateScenarionToken[j].indexOf('(')))+", ";
//                           } 
//    }
//                
//                 resizeTable(scTable); 
//                
//    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                  
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SampleUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SampleUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SampleUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SampleUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SampleUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton browse;
    private javax.swing.JButton browseJPG;
    private javax.swing.JButton browseXMI;
    private javax.swing.JButton changeInput;
    private javax.swing.JTextArea codeArea;
    private javax.swing.JTextArea codeArea1;
    private javax.swing.JButton create;
    private javax.swing.JButton exportTable;
    private javax.swing.JButton extractMessageAttributeButton;
    private javax.swing.JButton generateCode;
    private javax.swing.JButton generateScenario;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JTextField inputJPG;
    private javax.swing.JTextField inputXMI;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextField location;
    private javax.swing.JTable msgAttributeTable;
    private javax.swing.JPanel msgPreconditonPanel;
    private javax.swing.JPanel msgScenarioPanel;
    private javax.swing.JTable msgScenarioTable;
    private javax.swing.JButton nextScenarioButton;
    private javax.swing.JButton ok;
    private javax.swing.JButton previousScenarionButton;
    private javax.swing.JButton proceed_Gen_MSg_Pre;
    private javax.swing.JButton proceed_Home;
    private javax.swing.JTextField projectName;
    private javax.swing.JButton savePseudocode;
    private javax.swing.JTable scTable;
    private javax.swing.JLabel scenarioLabel;
    // End of variables declaration                   
 //   private javax.swing.JPanel mainPanel;
}
